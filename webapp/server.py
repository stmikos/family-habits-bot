#!/usr/bin/env python3
"""
FastAPI server –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è Family Habits WebApp
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram WebApp API
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
import os
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Family Habits WebApp",
    description="–°–µ–º–µ–π–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ - –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Telegram",
    version="1.0.0"
)

# CORS –¥–ª—è Telegram WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://web.telegram.org", "https://telegram.org", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
webapp_dir = Path(__file__).parent
static_dir = webapp_dir

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Telegram WebApp"""
    return FileResponse(static_dir / "index-telegram.html")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "ok", "message": "Family Habits WebApp is running"}

@app.get("/test", response_class=HTMLResponse)
async def test_page():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    return FileResponse(static_dir / "test.html")

@app.get("/test.html", response_class=HTMLResponse)
async def test_page_html():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    return FileResponse(static_dir / "test.html")

@app.get("/index.html", response_class=HTMLResponse)
async def index_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return FileResponse(static_dir / "index.html")

@app.get("/registration.html", response_class=HTMLResponse)
async def registration_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º—å–∏"""
    return FileResponse(static_dir / "registration-new.html")

@app.get("/registration", response_class=HTMLResponse)
async def registration_page_short():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º—å–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π URL)"""
    return FileResponse(static_dir / "registration-new.html")

@app.get("/registration-children.html", response_class=HTMLResponse)
async def registration_children_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–π"""
    return FileResponse(static_dir / "registration-children.html")

@app.get("/welcome.html", response_class=HTMLResponse)
async def welcome_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return FileResponse(static_dir / "welcome.html")

@app.get("/welcome", response_class=HTMLResponse)
async def welcome_page_short():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π URL)"""
    return FileResponse(static_dir / "welcome.html")

@app.get("/create-task.html", response_class=HTMLResponse)
async def create_task_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    return FileResponse(static_dir / "create-task.html")

@app.get("/shop.html", response_class=HTMLResponse)
async def shop_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞–≥—Ä–∞–¥"""
    return FileResponse(static_dir / "shop.html")

@app.get("/profile.html", response_class=HTMLResponse)
async def profile_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return FileResponse(static_dir / "profile.html")

@app.get("/statistics.html", response_class=HTMLResponse)
async def statistics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return FileResponse(static_dir / "statistics.html")

@app.get("/design-system.css")
async def design_system_css():
    """CSS —Ñ–∞–π–ª –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã"""
    return FileResponse(static_dir / "design-system.css", media_type="text/css")

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram Bot
@app.post("/api/telegram/user-data")
async def receive_telegram_data(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp"""
    try:
        data = await request.json()
        logger.info(f"Received Telegram data: {data}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        
        return {"status": "success", "message": "Data received"}
    except Exception as e:
        logger.error(f"Error processing Telegram data: {e}")
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/tasks/create")
async def create_task_api(request: Request):
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ WebApp"""
    try:
        data = await request.json()
        logger.info(f"Creating task: {data}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        
        return {"status": "success", "task_id": "demo_task_123"}
    except Exception as e:
        logger.error(f"Error creating task: {e}")
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/shop/purchase")
async def purchase_item_api(request: Request):
    """API –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    try:
        data = await request.json()
        logger.info(f"Purchase request: {data}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥, —Å–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        
        return {"status": "success", "purchase_id": "demo_purchase_456"}
    except Exception as e:
        logger.error(f"Error processing purchase: {e}")
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/api/user/{user_id}/stats")
async def get_user_stats(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats = {
            "user_id": user_id,
            "stars": 150,
            "level": 7,
            "streak_days": 12,
            "tasks_completed": 89,
            "family_participation": 85
        }
        
        return stats
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        raise HTTPException(status_code=404, detail="User not found")

if __name__ == "__main__":
    import uvicorn
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not (static_dir / "index.html").exists():
        logger.error("index.html not found! Make sure you're running from webapp directory")
        exit(1)
    
    logger.info("üå± Starting Family Habits WebApp Server...")
    logger.info(f"üìÅ Static files from: {static_dir}")
    logger.info("üîó Telegram WebApp integration enabled")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        "server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )