# Purpose: Task management handlers with FSM.
# Context: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥, –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π.
# Requirements: FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á, –∫–Ω–æ–ø–∫–∏ –¥–ª—è Parent/Child.

from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.db.models import Parent, Child, Task, TaskType, TaskStatus
from app.services.parent_service import ParentService
from app.services.task_service import TaskService
from app.core import get_logger

router = Router()
logger = get_logger(__name__)


class TaskCreationStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    waiting_for_child = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_type = State()
    waiting_for_points = State()
    waiting_for_coins = State()


@router.message(lambda message: message.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def create_task_start(message: types.Message, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å
    parent_service = ParentService(session)
    parent = await parent_service.get_parent_by_tg_id(user_id)
    
    if not parent:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π
    children = await parent_service.get_children(parent.id)
    
    if not children:
        await message.answer(
            "üë• –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–µ–π!\n\n"
            "üì± –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        )
        return
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç—å–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë¶üëß {child.name}", callback_data=f"child_{child.id}")]
        for child in children
    ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]])
    
    await message.answer(
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–î–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ?</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboard
    )
    
    await state.set_state(TaskCreationStates.waiting_for_child)


@router.callback_query(StateFilter(TaskCreationStates.waiting_for_child), F.data.startswith("child_"))
async def child_selected(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–†–µ–±—ë–Ω–æ–∫ –≤—ã–±—Ä–∞–Ω."""
    child_id = int(callback.data.split("_")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–±—ë–Ω–∫–∞
    await state.update_data(child_id=child_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–µ–±—ë–Ω–∫–∞
    child = await session.get(Child, child_id)
    if not child:
        await callback.answer("‚ùå –†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await callback.message.edit_text(
        f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è {child.name}</b>\n\n"
        f"üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–£–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É\", \"–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\"</i>"
    )
    
    await state.set_state(TaskCreationStates.waiting_for_title)
    await callback.answer()


@router.message(StateFilter(TaskCreationStates.waiting_for_title))
async def title_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
    title = message.text.strip()
    
    if len(title) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        return
    
    if len(title) > 120:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 120 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(title=title)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"
        f"<i>–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å</i>"
    )
    
    await state.set_state(TaskCreationStates.waiting_for_description)


@router.message(StateFilter(TaskCreationStates.waiting_for_description))
async def description_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
    description = message.text.strip()
    
    if len(description) < 5:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    await state.update_data(description=description)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="type_text")],
        [InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="type_photo")],
        [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="type_video")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_task")]
    ])
    
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
        f"üéØ <b>–ö–∞–∫ —Ä–µ–±—ë–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?</b>",
        reply_markup=keyboard
    )
    
    await state.set_state(TaskCreationStates.waiting_for_type)


@router.callback_query(StateFilter(TaskCreationStates.waiting_for_type), F.data.startswith("type_"))
async def type_selected(callback: types.CallbackQuery, state: FSMContext):
    """–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω."""
    task_type = callback.data.split("_")[1]
    await state.update_data(type=task_type)
    
    type_emojis = {"text": "üìù", "photo": "üì∏", "video": "üé•"}
    type_names = {"text": "–¢–µ–∫—Å—Ç", "photo": "–§–æ—Ç–æ", "video": "–í–∏–¥–µ–æ"}
    
    await callback.message.edit_text(
        f"‚úÖ –¢–∏–ø: {type_emojis[task_type]} {type_names[task_type]}\n\n"
        f"‚≠ê <b>–°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –¥–∞—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?</b>\n"
        f"<i>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100</i>"
    )
    
    await state.set_state(TaskCreationStates.waiting_for_points)
    await callback.answer()


@router.message(StateFilter(TaskCreationStates.waiting_for_points))
async def points_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω—ã –æ—á–∫–∏."""
    try:
        points = int(message.text.strip())
        if points < 1 or points > 100:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
        return
    
    await state.update_data(points=points)
    
    await message.answer(
        f"‚úÖ –û—á–∫–∏: <b>{points}</b>\n\n"
        f"ü™ô <b>–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –¥–∞—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?</b>\n"
        f"<i>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (0 = –±–µ–∑ –º–æ–Ω–µ—Ç)</i>"
    )
    
    await state.set_state(TaskCreationStates.waiting_for_coins)


@router.message(StateFilter(TaskCreationStates.waiting_for_coins))
async def coins_received(message: types.Message, state: FSMContext, session: AsyncSession):
    """–ü–æ–ª—É—á–µ–Ω—ã –º–æ–Ω–µ—Ç—ã - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
    try:
        coins = int(message.text.strip())
        if coins < 0 or coins > 100:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
    parent_service = ParentService(session)
    parent = await parent_service.get_parent_by_tg_id(user_id)
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ
    task = Task(
        title=data["title"],
        description=data["description"],
        type=TaskType(data["type"]),
        points=data["points"],
        coins=coins,
        child_id=data["child_id"],
        parent_id=parent.id,
        status=TaskStatus.new
    )
    
    session.add(task)
    await session.commit()
    await session.refresh(task)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    child = await session.get(Child, data["child_id"])
    
    type_emojis = {"text": "üìù", "photo": "üì∏", "video": "üé•"}
    
    await message.answer(
        f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        f"üë¶üëß –î–ª—è: <b>{child.name}</b>\n"
        f"üìã –ó–∞–¥–∞–Ω–∏–µ: <b>{data['title']}</b>\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üéØ –¢–∏–ø: {type_emojis[data['type']]}\n"
        f"‚≠ê –û—á–∫–∏: <b>{data['points']}</b>\n"
        f"ü™ô –ú–æ–Ω–µ—Ç—ã: <b>{coins}</b>\n\n"
        f"üîî –†–µ–±—ë–Ω–æ–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏!"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–±—ë–Ω–∫–∞ (–µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å tg_id)
    if child.tg_id:
        try:
            await message.bot.send_message(
                child.tg_id,
                f"üéØ <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n\n"
                f"üìã {data['title']}\n"
                f"üìù {data['description']}\n\n"
                f"‚≠ê –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>{data['points']} –æ—á–∫–æ–≤</b>\n"
                f"ü™ô –ú–æ–Ω–µ—Ç—ã: <b>{coins}</b>\n\n"
                f"üéÆ –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!"
            )
        except Exception as e:
            logger.warning(f"Failed to notify child {child.id}: {e}")
    
    await state.clear()
    logger.info(f"Task created: {task.id} for child {child.id} by parent {parent.id}")


@router.callback_query(F.data == "cancel_task")
async def cancel_task_creation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()