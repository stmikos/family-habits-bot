# Purpose: –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á.
# Context: Parent-specific bot functionality, task management, notifications.
# Requirements: Task creation, approval/rejection, family management.

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from app.core import get_logger

logger = get_logger(__name__)
router = Router()


class TaskCreationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    waiting_for_child = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_type = State()
    waiting_for_points = State()
    waiting_for_coins = State()
    waiting_for_confirmation = State()


@router.message(Command("parent"))
async def parent_menu(message: types.Message):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π.
    """
    user = message.from_user
    logger.info(f"Parent menu requested by user {user.id}")
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                    callback_data="parent_create_task"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
                    callback_data="parent_review_tasks"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë∂ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç—å–º–∏",
                    callback_data="parent_manage_children"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="parent_stats"
                )
            ]
        ]
    )
    
    menu_text = (
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ú–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text=menu_text, reply_markup=keyboard)


@router.callback_query(F.data == "parent_create_task")
async def start_task_creation(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.
    
    TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –∏–∑ API.
    """
    await callback_query.answer()
    
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    await callback_query.message.answer(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É</i>)"
    )
    
    await state.set_state(TaskCreationStates.waiting_for_title)


@router.message(TaskCreationStates.waiting_for_title)
async def process_task_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
    title = message.text.strip()
    
    if len(title) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    
    if len(title) > 120:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 120 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    
    await state.update_data(title=title)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ü–æ–º—ã—Ç—å –≤—Å—é –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–æ–ª</i>)"
    )
    
    await state.set_state(TaskCreationStates.waiting_for_description)


@router.message(TaskCreationStates.waiting_for_description)
async def process_task_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
    description = message.text.strip()
    
    await state.update_data(description=description)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="task_type_text"),
                InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="task_type_photo")
            ],
            [
                InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="task_type_video")
            ]
        ]
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:",
        reply_markup=keyboard
    )
    
    await state.set_state(TaskCreationStates.waiting_for_type)


@router.callback_query(F.data.startswith("task_type_"))
async def process_task_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è."""
    task_type = callback_query.data.replace("task_type_", "")
    await state.update_data(type=task_type)
    
    await callback_query.answer()
    
    type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•"}
    
    await callback_query.message.answer(
        f"‚úÖ –¢–∏–ø –æ—Ç—á—ë—Ç–∞: {type_emoji.get(task_type, '')} {task_type}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (1-100):\n"
        "(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 5-10 –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π)"
    )
    
    await state.set_state(TaskCreationStates.waiting_for_points)


@router.message(TaskCreationStates.waiting_for_points)
async def process_task_points(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ."""
    try:
        points = int(message.text.strip())
        
        if points < 1 or points > 100:
            await message.answer(
                "‚ùå –û—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
        await state.update_data(points=points)
        
        await message.answer(
            f"‚úÖ –û—á–∫–∏: <b>{points}</b> ‚≠êÔ∏è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (0-100):\n"
            "(–º–æ–Ω–µ—Ç—ã –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ)"
        )
        
        await state.set_state(TaskCreationStates.waiting_for_coins)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )


@router.message(TaskCreationStates.waiting_for_coins)
async def process_task_coins(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ."""
    try:
        coins = int(message.text.strip())
        
        if coins < 0 or coins > 100:
            await message.answer(
                "‚ùå –ú–æ–Ω–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
        await state.update_data(coins=coins)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data = await state.get_data()
        
        type_emoji = {"text": "üìù", "photo": "üì∏", "video": "üé•"}
        task_type = data.get("type", "text")
        
        summary = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
            f"<b>–¢–∏–ø:</b> {type_emoji.get(task_type, '')} {task_type}\n"
            f"<b>–û—á–∫–∏:</b> {data['points']} ‚≠êÔ∏è\n"
            f"<b>–ú–æ–Ω–µ—Ç—ã:</b> {coins} ü™ô\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="task_confirm"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="task_cancel")
                ]
            ]
        )
        
        await message.answer(summary, reply_markup=keyboard)
        await state.set_state(TaskCreationStates.waiting_for_confirmation)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )


@router.callback_query(F.data == "task_confirm")
async def confirm_task_creation(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
    await callback_query.answer()
    
    data = await state.get_data()
    
    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
    logger.info(f"Task created by user {callback_query.from_user.id}: {data}")
    
    await callback_query.message.answer(
        "‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        "–†–µ–±—ë–Ω–æ–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏.\n"
        "–í—ã —É–≤–∏–¥–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–µ–±—ë–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞–Ω–∏–µ."
    )
    
    await state.clear()


@router.callback_query(F.data == "task_cancel")
async def cancel_task_creation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
    await callback_query.answer()
    await callback_query.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@router.callback_query(F.data == "parent_review_tasks")
async def review_tasks(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.
    
    TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API.
    """
    await callback_query.answer()
    
    tasks_text = (
        "üìã <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>\n\n"
        "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        "–ö–æ–≥–¥–∞ —Ä–µ–±—ë–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞–Ω–∏–µ, –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å."
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_parent_menu"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        text=tasks_text,
        reply_markup=keyboard
    )


@router.callback_query(F.data == "parent_manage_children")
async def manage_children(callback_query: types.CallbackQuery):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç—å–º–∏.
    
    TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API.
    """
    await callback_query.answer()
    
    children_text = (
        "üë∂ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç—å–º–∏</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–µ—Ç–µ–π\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_parent_menu"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        text=children_text,
        reply_markup=keyboard
    )


@router.callback_query(F.data == "parent_stats")
async def show_stats(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    
    TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API.
    """
    await callback_query.answer()
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–º—å–∏</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_parent_menu"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        text=stats_text,
        reply_markup=keyboard
    )


@router.callback_query(F.data == "back_to_parent_menu")
async def back_to_parent_menu(callback_query: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è."""
    await callback_query.answer()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                    callback_data="parent_create_task"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
                    callback_data="parent_review_tasks"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë∂ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç—å–º–∏",
                    callback_data="parent_manage_children"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="parent_stats"
                )
            ]
        ]
    )
    
    menu_text = (
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ú–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback_query.message.edit_text(
        text=menu_text,
        reply_markup=keyboard
    )
