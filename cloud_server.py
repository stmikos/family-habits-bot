#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Family Habits WebApp
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render, Railway, Heroku –±–µ–∑ Rust –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import json
from pathlib import Path
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
import uvicorn

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
PORT = int(os.environ.get("PORT", 8000))
HOST = "0.0.0.0"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞

app = FastAPI(
    title="Family Habits WebApp",
    description="Telegram WebApp –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏–≤—ã—á–µ–∫",
    version="1.0.0"
)

# CORS –¥–ª—è Telegram WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://web.telegram.org", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    print(f"üîç {request.method} {request.url}")
    response = await call_next(request)
    print(f"üì§ –û—Ç–≤–µ—Ç: {response.status_code}")
    return response

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ webapp
webapp_dir = Path("webapp")
if not webapp_dir.exists():
    print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ webapp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    webapp_dir.mkdir(exist_ok=True)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
if webapp_dir.exists():
    app.mount("/static", StaticFiles(directory="webapp"), name="static")

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    return {"status": "healthy", "message": "Family Habits WebApp is running"}

@app.get("/")
async def serve_index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Telegram"""
    print("üì± –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Telegram WebApp)")
    try:
        return FileResponse("webapp/index-telegram.html")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ index-telegram.html: {e}")
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é
        try:
            return FileResponse("webapp/index.html")
        except:
            return HTMLResponse("""
            <html><head><title>Family Habits</title></head>
            <body><h1>üå± Family Habits WebApp</h1>
            <p>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞!</p></body></html>
            """)

@app.get("/registration")
async def serve_registration():
    print("üìù –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    try:
        file_path = "webapp/registration-new.html"
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return JSONResponse({"error": f"File {file_path} not found"}, status_code=404)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {file_path}")
        return FileResponse(file_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ registration: {e}")
        return JSONResponse({"error": f"Registration page error: {str(e)}"}, status_code=500)

@app.get("/registration-children")
async def serve_registration_children():
    try:
        return FileResponse("webapp/registration-children.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/welcome")
async def serve_welcome():
    try:
        return FileResponse("webapp/welcome.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/create-task")
async def serve_create_task():
    try:
        return FileResponse("webapp/create-task.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/shop")
async def serve_shop():
    try:
        return FileResponse("webapp/shop.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/profile")
async def serve_profile():
    try:
        return FileResponse("webapp/profile.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/statistics")
async def serve_statistics():
    try:
        return FileResponse("webapp/statistics.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.post("/api/telegram-data")
async def handle_telegram_data(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        data = await request.json()
        return {"status": "success", "received": data}
    except Exception as e:
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Family Habits WebApp –Ω–∞ {HOST}:{PORT}")
    print(f"üì± WebApp –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{HOST}:{PORT}")
    
    uvicorn.run(
        "cloud_server:app",
        host=HOST,
        port=PORT,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        access_log=True
    )