#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Family Habits WebApp + Telegram Bot Webhook
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render, Railway, Heroku
"""

import os
import json
import asyncio
import aiohttp
from pathlib import Path
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
import uvicorn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
PORT = int(os.environ.get("PORT", 8000))
HOST = "0.0.0.0"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞

# Telegram Bot Token
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
WEBAPP_URL = os.environ.get("WEBAPP_URL", "https://family-habits-bot.onrender.com")

print(f"üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"  - TELEGRAM_BOT_TOKEN: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if TELEGRAM_BOT_TOKEN else '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
print(f"  - WEBAPP_URL: {WEBAPP_URL}")

app = FastAPI(
    title="Family Habits WebApp + Bot",
    description="Telegram WebApp –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏–≤—ã—á–µ–∫ + Bot Webhook",
    version="1.0.0"
)

# CORS –¥–ª—è Telegram WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://web.telegram.org", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    print(f"üîç {request.method} {request.url}")
    response = await call_next(request)
    print(f"üì§ –û—Ç–≤–µ—Ç: {response.status_code}")
    return response

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ webapp
webapp_dir = Path("webapp")
if not webapp_dir.exists():
    print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ webapp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    webapp_dir.mkdir(exist_ok=True)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
if webapp_dir.exists():
    app.mount("/static", StaticFiles(directory="webapp"), name="static")

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    return {"status": "healthy", "message": "Family Habits WebApp is running"}

@app.get("/")
async def serve_index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Telegram"""
    print("üì± –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Telegram WebApp)")
    try:
        return FileResponse("webapp/index-telegram.html")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ index-telegram.html: {e}")
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é
        try:
            return FileResponse("webapp/index.html")
        except:
            return HTMLResponse("""
            <html><head><title>Family Habits</title></head>
            <body><h1>üå± Family Habits WebApp</h1>
            <p>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞!</p></body></html>
            """)

@app.get("/registration")
async def serve_registration():
    print("üìù –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    try:
        file_path = "webapp/registration-new.html"
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return JSONResponse({"error": f"File {file_path} not found"}, status_code=404)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {file_path}")
        return FileResponse(file_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ registration: {e}")
        return JSONResponse({"error": f"Registration page error: {str(e)}"}, status_code=500)

@app.get("/registration-children")
async def serve_registration_children():
    try:
        return FileResponse("webapp/registration-children.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/welcome")
async def serve_welcome():
    try:
        return FileResponse("webapp/welcome.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/create-task")
async def serve_create_task():
    try:
        return FileResponse("webapp/create-task.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/shop")
async def serve_shop():
    try:
        return FileResponse("webapp/shop.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/profile")
async def serve_profile():
    try:
        return FileResponse("webapp/profile.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.get("/statistics")
async def serve_statistics():
    try:
        return FileResponse("webapp/statistics.html")
    except:
        return JSONResponse({"error": "File not found"}, status_code=404)

@app.post("/api/telegram-data")
async def handle_telegram_data(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        data = await request.json()
        return {"status": "success", "received": data}
    except Exception as e:
        return {"status": "error", "message": str(e)}

# Telegram Bot Webhook
@app.post("/telegram-webhook")
async def telegram_webhook(request: Request):
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram Bot"""
    try:
        update = await request.json()
        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: {update}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if "message" in update:
            message = update["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            if text.startswith("/start") or text.startswith("/app"):
                await send_webapp_message(chat_id)
        
        return {"status": "ok"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return {"status": "error", "message": str(e)}

async def send_webapp_message(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å WebApp –∫–Ω–æ–ø–∫–æ–π"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üå± –û—Ç–∫—Ä—ã—Ç—å Family Habits",
                    "web_app": {"url": WEBAPP_URL}
                }
            ],
            [
                {
                    "text": "‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                    "callback_data": "about"
                }
            ]
        ]
    }
    
    payload = {
        "chat_id": chat_id,
        "text": "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Family Habits!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        "reply_markup": keyboard
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    webhook_url = f"{WEBAPP_URL}/telegram-webhook"
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
    
    payload = {
        "url": webhook_url,
        "allowed_updates": ["message", "callback_query"]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                if result.get("ok"):
                    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# Startup event –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
@app.on_event("startup")
async def startup_event():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await setup_webhook()

if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Family Habits WebApp + Bot –Ω–∞ {HOST}:{PORT}")
    print(f"üì± WebApp –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{HOST}:{PORT}")
    print(f"ü§ñ Bot Token: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if TELEGRAM_BOT_TOKEN else '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    uvicorn.run(
        "cloud_server:app",
        host=HOST,
        port=PORT,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        access_log=True
    )