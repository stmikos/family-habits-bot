#!/usr/bin/env python3
# Purpose: Demo script to run Family Habit Bot.
# Context: Quick start script for testing bot functionality.
# Requirements: Check environment, create demo data, start bot.

import asyncio
import os
import sys
from app.core.config import settings
from app.core import setup_logging, get_logger
from app.bot.main import create_bot, create_dispatcher

logger = get_logger(__name__)


async def create_demo_data():
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    from app.db.session import SessionLocal
    from app.db.models import Family, Parent, Child, ShopItem, Plan
    
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        from sqlalchemy import select, func
        count = await session.scalar(select(func.count(Family.id)))
        
        if count > 0:
            logger.info("Demo data already exists")
            return
        
        # –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Å–µ–º—å—é
        family = Family(plan=Plan.FREE)
        session.add(family)
        await session.flush()
        
        # –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Ä–æ–¥–∏—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º admin ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        admin_ids = settings.ADMIN_USER_IDS
        if admin_ids:
            parent = Parent(
                tg_id=admin_ids[0],
                name="Demo Parent",
                family_id=family.id
            )
            session.add(parent)
        
        # –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ-–¥–µ—Ç–µ–π
        children = [
            Child(name="–ê–Ω—è", family_id=family.id, points=15, coins=3),
            Child(name="–ú–∞–∫—Å–∏–º", family_id=family.id, points=22, coins=5),
        ]
        session.add_all(children)
        
        # –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
        shop_items = [
            ShopItem(sku="ice_cream", title="üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ", price_coins=3, description="–í–∫—É—Å–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ –Ω–∞ –≤—ã–±–æ—Ä"),
            ShopItem(sku="movie_night", title="üé¨ –°–µ–º–µ–π–Ω—ã–π –∫–∏–Ω–æ–ø—Ä–æ—Å–º–æ—Ç—Ä", price_coins=5, description="–í—ã–±–∏—Ä–∞–µ—à—å —Ñ–∏–ª—å–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏"),
            ShopItem(sku="extra_screen", title="üì± +30 –º–∏–Ω —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", price_coins=2, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –≥–∞–¥–∂–µ—Ç–∞–º–∏"),
            ShopItem(sku="pizza", title="üçï –ü–∏—Ü—Ü–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö", price_coins=8, description="–ó–∞–∫–∞–∑—ã–≤–∞–µ–º –ø–∏—Ü—Ü—É –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ"),
            ShopItem(sku="book_choice", title="üìö –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è", price_coins=4, description="–í—ã–±–∏—Ä–∞–µ—à—å –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —á–∏—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ"),
        ]
        session.add_all(shop_items)
        
        await session.commit()
        logger.info(f"‚úÖ Created demo family {family.id} with {len(children)} children and {len(shop_items)} shop items")


async def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ."""
    logger.info("üîç Checking environment...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if settings.TELEGRAM_BOT_TOKEN == "demo_token_for_testing":
        logger.warning("‚ö†Ô∏è  Using demo Telegram Bot token")
        logger.warning("   To use with real Telegram, set TELEGRAM_BOT_TOKEN in .env")
    else:
        logger.info("‚úÖ Real Telegram Bot token configured")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL MiniApp
    if settings.WEBAPP_URL == "https://example.com":
        logger.warning("‚ö†Ô∏è  Using demo WebApp URL")
        logger.warning("   Set WEBAPP_URL to your deployed MiniApp")
    else:
        logger.info(f"‚úÖ WebApp URL: {settings.WEBAPP_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists("family_habits.db"):
        logger.info("‚úÖ Database exists")
    else:
        logger.warning("‚ö†Ô∏è  Database not found, run: alembic upgrade head")
    
    logger.info(f"‚úÖ Environment check complete")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    setup_logging(settings.log_level)
    logger.info("üöÄ Starting Family Habit Bot Demo")
    
    await check_environment()
    await create_demo_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    if settings.TELEGRAM_BOT_TOKEN == "demo_token_for_testing":
        logger.info("üìã Bot configured successfully!")
        logger.info("")
        logger.info("üéØ M2 Phase Implementation Complete:")
        logger.info("  ‚úÖ Telegram Bot with aiogram 3.x")
        logger.info("  ‚úÖ FSM for task creation workflow")
        logger.info("  ‚úÖ Parent/Child role separation")
        logger.info("  ‚úÖ Database with Telegram integration")
        logger.info("  ‚úÖ MiniApp button integration")
        logger.info("  ‚úÖ Shop system foundation")
        logger.info("")
        logger.info("üîß To run with real Telegram:")
        logger.info("  1. Get bot token from @BotFather")
        logger.info("  2. Set TELEGRAM_BOT_TOKEN in .env")
        logger.info("  3. Deploy MiniApp frontend")
        logger.info("  4. Set WEBAPP_URL in .env")
        logger.info("  5. Run: python -m app.bot.main")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ Starting Telegram Bot...")
    bot = await create_bot()
    dp = await create_dispatcher()
    
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Bot started! Send /start to test")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)